{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPcN1j9oUnGC9+kbnh5ICEV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Tugas 1**"],"metadata":{"id":"i7e7BBaGFnxq"}},{"cell_type":"code","source":["class TreeNode:\n","    def __init__(self, data):\n","        self.data = data\n","        self.left = None\n","        self.right = None\n","\n","def inorder_traversal(root):\n","    if root:\n","        inorder_traversal(root.left)\n","        print(root.data, end=\" \")\n","        inorder_traversal(root.right)\n","\n","# Struktur Tree berdasarkan identitas saya\n","# Membuat node-node pohon\n","root_node = TreeNode(23)\n","left_child = TreeNode(9)\n","right_child = TreeNode(35)\n","left_grandchild = TreeNode(23)\n","right_grandchild = TreeNode(4)\n","\n","# Menghubungkan node-node\n","root_node.left = left_child\n","root_node.right = right_child\n","left_child.left = left_grandchild\n","right_child.right = right_grandchild\n","\n","# Menampilkan in-order traversal dari pohon\n","print(\"In-order Traversal:\")\n","inorder_traversal(root_node)\n","print()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iLNPvbqaFnZm","executionInfo":{"status":"ok","timestamp":1747264728657,"user_tz":-420,"elapsed":51,"user":{"displayName":"Ilyasa Abiyyu","userId":"07140171144983850462"}},"outputId":"e0183b8f-3096-49e6-adb5-c00214649ea4"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["In-order Traversal:\n","23 9 23 35 4 \n"]}]},{"cell_type":"markdown","source":["# **Tugas 2**"],"metadata":{"id":"AkVsvdg-FoE-"}},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"By32UVmyC-7F","executionInfo":{"status":"ok","timestamp":1747265626273,"user_tz":-420,"elapsed":46,"user":{"displayName":"Ilyasa Abiyyu","userId":"07140171144983850462"}},"outputId":"a0e473aa-365e-4bea-ebea-61f9b7e8caea"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hasil Traversal:\n","Inorder: [4, 17, 23, 35, 42, 73, 108]\n","Preorder: [35, 23, 4, 17, 73, 42, 108]\n","Postorder: [17, 4, 23, 42, 108, 73, 35]\n","--------------------\n","Angka 35 ditemukan dalam BST.\n","Angka 50 tidak ditemukan dalam BST.\n"]}],"source":["class TreeNode:\n","    def __init__(self, data):\n","        self.data = data\n","        self.left = None\n","        self.right = None\n","\n","def insert(root, data):\n","    # Fungsi untuk memasukkan node baru ke dalam BST\n","    if root is None:\n","        return TreeNode(data)\n","    if data < root.data:\n","        root.left = insert(root.left, data)\n","    elif data > root.data:\n","        root.right = insert(root.right, data)\n","    return root\n","\n","def inorder_traversal(root):\n","    # Traversal inorder: Kiri -> Root -> Kanan\n","    result = []\n","    if root:\n","        result.extend(inorder_traversal(root.left))\n","        result.append(root.data)\n","        result.extend(inorder_traversal(root.right))\n","    return result\n","\n","def preorder_traversal(root):\n","    # Traversal preorder: Root -> Kiri -> Kanan\n","    result = []\n","    if root:\n","        result.append(root.data)\n","        result.extend(preorder_traversal(root.left))\n","        result.extend(preorder_traversal(root.right))\n","    return result\n","\n","def postorder_traversal(root):\n","    # Traversal postorder: Kiri -> Kanan -> Root\n","    result = []\n","    if root:\n","        result.extend(postorder_traversal(root.left))\n","        result.extend(postorder_traversal(root.right))\n","        result.append(root.data)\n","    return result\n","\n","def search(root, key):\n","    # Fungsi untuk mencari sebuah key dalam BST\n","    if root is None or root.data == key:\n","        return root\n","    if key < root.data:\n","        return search(root.left, key)\n","    return search(root.right, key)\n","\n","# Daftar angka yang akan dimasukkan ke dalam BST\n","data_angka = [35, 23, 4, 73, 108, 17, 42]\n","\n","# Membuat root node dari BST\n","root = None\n","for angka in data_angka:\n","    root = insert(root, angka)\n","\n","# Menampilkan hasil traversal\n","print(\"Hasil Traversal:\")\n","print(\"Inorder:\", inorder_traversal(root))\n","print(\"Preorder:\", preorder_traversal(root))\n","print(\"Postorder:\", postorder_traversal(root))\n","print(\"-\" * 20)\n","\n","# Fitur Pencarian\n","target_cari_ada = int(str(2420506035)[-2:]) # Dua digit terakhir NPM: 35\n","target_cari_tidak_ada = 50 # Angka yang tidak ada dalam daftar\n","\n","hasil_cari_ada = search(root, target_cari_ada)\n","if hasil_cari_ada:\n","    print(f\"Angka {target_cari_ada} ditemukan dalam BST.\")\n","else:\n","    print(f\"Angka {target_cari_ada} tidak ditemukan dalam BST.\")\n","\n","hasil_cari_tidak_ada = search(root, target_cari_tidak_ada)\n","if hasil_cari_tidak_ada:\n","    print(f\"Angka {target_cari_tidak_ada} ditemukan dalam BST.\")\n","else:\n","    print(f\"Angka {target_cari_tidak_ada} tidak ditemukan dalam BST.\")"]}]}